import pandas as pd
from aa_matching_msf import *

aa_mm = AAMatch(dbversion=3420)

loclist = ["A", "B", "C", "DRB1", "DRB3", "DRB4", "DRB5", "DQA1", "DQB1", "DPA1", "DPB1"]

test_set = {
    "A" : ["A*01:01:01:01", "A*03:07:01:01", "A*11:01:01:28", "A*68:35:01:01"],
    "B" : ["B*07:02:01:01", "B*15:73:01:01", "B*38:02:01:01", "B*55:02:01:01"],
    "C" : ["C*01:02:01:01", "C*05:01:01:01", "C*08:02:01:01", "C*18:01:01:01"],
    "DPA1" : ["DPA1*01:03:01:01", "DPA1*02:01:01:01", "DPA1*03:01:01:01", "DPA1*04:01:01:01"],
    "DPB1" : ["DPB1*01:01:01:01", "DPB1*02:01:02:01", "DPB1*03:01:01:01", "DPB1*19:01:01:01"],
    "DQA1" : ["DQA1*01:01:01:01", "DQA1*02:01:01:01", "DQA1*03:02:01:01", "DQA1*05:05:01:01"],
    "DQB1" : ["DQB1*05:01:01:01", "DQB1*06:02:01:01", "DQB1*02:01:01:01", "DQB1*04:01:01:01"],
    "DRB1" : ["DRB1*01:01:01:01", "DRB1*07:01:01:01", "DRB1*13:02:01:01", "DRB1*16:02:01:01"],
    "DRB3" : ["DRB3*01:01:02:01", "DRB3*02:02:01:01", "DRB3*03:01:01:01", "DRB3*03:01:03:01"],
    "DRB4" : ["DRB4*01:01:01:01", "DRB4*01:03:01:01", "DRB4*01:07:01", "DRB4*01:33"],
    "DRB5" : ["DRB5*01:01:01:01", "DRB5*01:11", "DRB5*01:45", "DRB5*01:62"]
    }

test_seqs = {
    "A*01:01:01:01" : "GSHSMRYFFTSVSRPGRGEPRFIAVGYVDDTQFVRFDSDAASQKMEPRAPWIEQEGPEYWDQETRNMKAHSQTDRANLGTLRGYYNQSEDGSHTIQIMYGCDVGPDGRFLRGYRQDAYDGKDYIALNEDLRSWTAADMAAQITKRKWEAVHAAEQRRVYLEGRCVDGLRRYLENGKETLQRT",
    "A*03:07:01:01" : "GSHSMRYFFTSVSRPGRGEPRFIAVGYVDDTQFVRFDSDAASQRMEPRAPWIEQEGPEYWDQETRNVKAQSQTDRVDLGTLRGYYNQSEAGSHTIQIMYGCDVGSDGRFLRGYRQDAYDGKDYIALNEDLRSWTAADMAAQITKRKWEAAHVAEQLRAYLDGTCVEWLRRYLENGKETLQRT",
    "A*11:01:01:28" : "GSHSMRYFYTSVSRPGRGEPRFIAVGYVDDTQFVRFDSDAASQRMEPRAPWIEQEGPEYWDQETRNVKAQSQTDRVDLGTLRGYYNQSEDGSHTIQIMYGCDVGPDGRFLRGYRQDAYDGKDYIALNEDLRSWTAADMAAQITKRKWEAAHAAEQQRAYLEGRCVEWLRRYLENGKETLQRT",
    "A*68:35:01:01" : "GSHSMRYFYTSVSRPGCGEPRFIAVGYVDDTQFVRFDSDAASQRMEPRAPWIEQEGPEYWDRNTRNVKAQSQTDRVDLGTLRGYYNQSEAGSHTIQMMYGCDVGSDGRFLRGYRQDAYDGKDYIALKEDLRSWTAADMAAQTTKHKWEAAHVAEQWRAYLEGTCVEWLRRYLENGKETLQRT",
    "B*07:02:01:01" : "GSHSMRYFYTSVSRPGRGEPRFISVGYVDDTQFVRFDSDAASPREEPRAPWIEQEGPEYWDRNTQIYKAQAQTDRESLRNLRGYYNQSEAGSHTLQSMYGCDVGPDGRLLRGHDQYAYDGKDYIALNEDLRSWTAADTAAQITQRKWEAAREAEQRRAYLEGECVEWLRRYLENGKDKLERA",
    "B*15:73:01:01" : "GSHSMRYFYTAMSRPGRGEPRFIAVGYVDDTQFVRFDSDAASPRMAPRAPWIEQEGPEYWDRETQISKTNTQTYRESLRNLRGYYNQSEAGSHTLQRMYGCDVGPDGRLLRGHNQLAYDGKDYIALNEDLSSWTAADTAAQITQRKWEAAREAEQWRAYLEGLCVEWLRRYLENGKETLQRA",
    "B*38:02:01:01" : "GSHSMRYFYTSVSRPGRGEPRFISVGYVDDTQFVRFDSDAASPREEPRAPWIEQEGPEYWDRNTQICKTNTQTYRENLRTALRYYNQSEAGSHTLQRMYGCDVGPDGRLLRGHNQFAYDGKDYIALNEDLSSWTAADTAAQITQRKWEAARVAEQLRTYLEGTCVEWLRRYLENGKETLQRA",
    "B*55:02:01:01" : "GSHSMRYFYTAMSRPGRGEPRFIAVGYVDDTQFVRFDSDAASPREEPRAPWIEQEGPEYWDRNTQIYKAQAQTDRESLRNLRGYYNQSEAGSHTWQTMYGCDLGPDGRLLRGHNQLAYDGKDYIALNEDLSSWTAADTAAQITQRKWEAARVAEQLRAYLEGTCVEWLRRYLENGKETLQRA",
    "C*01:02:01:01" : "CSHSMKYFFTSVSRPGRGEPRFISVGYVDDTQFVRFDSDAASPRGEPRAPWVEQEGPEYWDRETQKYKRQAQTDRVSLRNLRGYYNQSEAGSHTLQWMCGCDLGPDGRLLRGYDQYAYDGKDYIALNEDLRSWTAADTAAQITQRKWEAAREAEQRRAYLEGTCVEWLRRYLENGKETLQRA",
    "C*05:01:01:01" : "CSHSMRYFYTAVSRPGRGEPRFIAVGYVDDTQFVQFDSDAASPRGEPRAPWVEQEGPEYWDRETQKYKRQAQTDRVNLRKLRGYYNQSEAGSHTLQRMYGCDLGPDGRLLRGYNQFAYDGKDYIALNEDLRSWTAADKAAQITQRKWEAAREAEQRRAYLEGTCVEWLRRYLENGKKTLQRA",
    "C*08:02:01:01" : "CSHSMRYFYTAVSRPGRGEPRFIAVGYVDDTQFVQFDSDAASPRGEPRAPWVEQEGPEYWDRETQKYKRQAQTDRVSLRNLRGYYNQSEAGSHTLQRMYGCDLGPDGRLLRGYNQFAYDGKDYIALNEDLRSWTAADKAAQITQRKWEAAREAEQRRAYLEGTCVEWLRRYLENGKKTLQRA",
    "C*18:01:01:01" : "CSHSMRYFDTAVSRPGRGEPRFISVGYVDDTQFVRFDSDAASPRGEPRAPWVEQEGPEYWDRETQKYKRQAQADRVNLRKLRGYYNQSEDGSHTLQRMFGCDLGPDGRLLRGYNQFAYDGKDYIALNEDLRSWTAADTAAQITQRKWEAAREAEQRRAYLEGTCVEWLRRYLENGKETLQRA",
    "DPA1*01:03:01:01" : "IKADHVSTYAAFVQTHRPTGEFMFEFDEDEMFYVDLDKKETVWHLEEFGQAFSFEAQGGLANIAILNNNLNTLIQRSNHTQATNDPPEVTVFPK",
    "DPA1*02:01:01:01" : "IKADHVSTYAAFVQTHRPTGEFMFEFDEDEQFYVDLDKKETVWHLEEFGRAFSFEAQGGLANIAILNNNLNTLIQRSNHTQAANDPPEVTVFPK",
    "DPA1*03:01:01:01" : "IKADHVSTYAMFVQTHRPTGEFMFEFDEDEMFYVDLDKKETVWHLEEFGQAFSFEAQGGLANIAISNNNLNTLIQRSNHTQATNDPPEVTVFPK",
    "DPA1*04:01:01:01" : "IKADHVSTYAAFVQTHRTTGEFMFEFDDDEMFYVDLDKKETVWHLEEFGRAFSFEAQGGLANIAILNNNLNIAIQRSNHTQAANDPPEVTVFPK",
    "DPB1*01:01:01:01" : "RATPENYVYQGRQECYAFNGTQRFLERYIYNREEYARFDSDVGEFRAVTELGRPAAEYWNSQKDILEEKRAVPDRVCRHNYELDEAVTLQRRVQ",
    "DPB1*02:01:02:01" : "RATPENYLFQGRQECYAFNGTQRFLERYIYNREEFVRFDSDVGEFRAVTELGRPDEEYWNSQKDILEEERAVPDRMCRHNYELGGPMTLQRRVQ",
    "DPB1*03:01:01:01" : "RATPENYVYQLRQECYAFNGTQRFLERYIYNREEFVRFDSDVGEFRAVTELGRPDEDYWNSQKDLLEEKRAVPDRVCRHNYELDEAVTLQRRVQ",
    "DPB1*19:01:01:01" : "RATPENYLFQGRQECYAFNGTQRFLERYIYNREEFVRFDSDVGEFRAVTELGRPEAEYWNSQKDILEEERAVPDRICRHNYELDEAVTLQRRVQ",
    "DQA1*01:01:01:01" : "EDIVADHVASCGVNLYQFYGPSGQYTHEFDGDEEFYVDLERKETAWRWPEFSKFGGFDPQGALRNMAVAKHNLNIMIKRYNSTAATNEVPEVTV",
    "DQA1*02:01:01:01" : "EDIVADHVASYGVNLYQSYGPSGQFTHEFDGDEEFYVDLERKETVWKLPLFHRLRFDPQFALTNIAVLKHNLNILIKRSNSTAATNEVPEVTV",
    "DQA1*03:02:01:01" : "EDIVADHVASYGVNLYQSYGPSGQYSHEFDGDEEFYVDLERKETVWQLPLFRRFRRFDPQFALTNIAVLKHNLNIVIKRSNSTAATNEVPEVTV",
    "DQA1*05:05:01:01" : "EDIVADHVASYGVNLYQSYGPSGQYTHEFDGDEQFYVDLGRKETVWCLPVLRQFRFDPQFALTNIAVLKHNLNSLIKRSNSTAATNEVPEVTV",
    "DQB1*05:01:01:01" : "RDSPEDFVYQFKGLCYFTNGTERVRGVTRHIYNREEYVRFDSDVGVYRAVTPQGRPVAEYWNSQKEVLEGARASVDRVCRHNYEVAYRGILQRRV",
    "DQB1*06:02:01:01" : "RDSPEDFVFQFKGMCYFTNGTERVRLVTRYIYNREEYARFDSDVGVYRAVTPQGRPDAEYWNSQKEVLEGTRAELDTVCRHNYEVAFRGILQRRV",
    "DQB1*02:01:01:01" : "RDSPEDFVYQFKGMCYFTNGTERVRLVSRSIYNREEIVRFDSDVGEFRAVTLLGLPAAEYWNSQKDILERKRAAVDRVCRHNYQLELRTTLQRRV",
    "DQB1*04:01:01:01" : "RDSPEDFVFQFKGMCYFTNGTELVRGVTRYIYNREEYARFDSDVGVYRAVTPLGRLDAEYWNSQKDILEEDRASVDTVCRHNYQLELRTTLQRRV",
    "DRB1*01:01:01:01" : "GDTRPRFLWQLKFECHFFNGTERVRLLERCIYNQEESVRFDSDVGEYRAVTELGRPDAEYWNSQKDLLEQRRAAVDTYCRHNYGVGESFTVQRR",
    "DRB1*07:01:01:01" : "GDTQPRFLWQGKYKCHFFNGTERVQFLERLFYNQEEFVRFDSDVGEYRAVTELGRPVAESWNSQKDILEDRRGQVDTVCRHNYGVGESFTVQRR",
    "DRB1*13:02:01:01" : "GDTRPRFLEYSTSECHFFNGTERVRFLDRYFHNQEENVRFDSDVGEFRAVTELGRPDAEYWNSQKDILEDERAAVDTYCRHNYGVGESFTVQRR",
    "DRB1*16:02:01:01" : "GDTRPRFLWQPKRECHFFNGTERVRFLDRYFYNQEESVRFDSDVGEYRAVTELGRPDAEYWNSQKDLLEDRRAAVDTYCRHNYGVGESFTVQRR",
    "DRB3*01:01:02:01" : "GDTRPRFLELRKSECHFFNGTERVRYLDRYFHNQEEFLRFDSDVGEYRAVTELGRPVAESWNSQKDLLEQKRGRVDNYCRHNYGVGESFTVQRR",
    "DRB3*02:02:01:01" : "GDTRPRFLELLKSECHFFNGTERVRFLERHFHNQEEYARFDSDVGEYRAVRELGRPDAEYWNSQKDLLEQKRGQVDNYCRHNYGVGESFTVQRR",
    "DRB3*03:01:01:01" : "GDTRPRFLELLKSECHFFNGTERVRFLERYFHNQEEFVRFDSDVGEYRAVTELGRPVAESWNSQKDLLEQKRGQVDNYCRHNYGVVESFTVQRR",
    "DRB3*03:01:03:01" : "GDTRPRFLELLKSECHFFNGTERVRFLERYFHNQEEFVRFDSDVGEYRAVTELGRPVAESWNSQKDLLEQKRGQVDNYCRHNYGVVESFTVQRR",
    "DRB4*01:01:01:01" : "GDTQPRFLEQAKCECHFLNGTERVWNLIRYIYNQEEYARYNSDLGEYQAVTELGRPDAEYWNSQKDLLERRRAEVDTYCRYNYGVVESFTVQRR",
    "DRB4*01:03:01:01" : "GDTQPRFLEQAKCECHFLNGTERVWNLIRYIYNQEEYARYNSDLGEYQAVTELGRPDAEYWNSQKDLLERRRAEVDTYCRYNYGVVESFTVQRR",
    "DRB4*01:07:01" : "GDTQPRFLEQAKCECHFLNGTERVWNLIRYIYNQEEYARYNSDLGEYQAVTELGRPDAEYWNSQKDLLERRRAEVDTYCRYNYRVVESFTVQ",
    "DRB4*01:33" : "RFLEQAKCECHFLNGTERVWNLIRYIYNQEEYARYNSDLGKYQAVTELGRPDAEYWNSQKDLLERRRAEVDTYCRYNYGVVESFTVQRR",
    "DRB5*01:01:01:01" : "GDTRPRFLQQDKYECHFFNGTERVRFLHRDIYNQEEDLRFDSDVGEYRAVTELGRPDAEYWNSQKDFLEDRRAAVDTYCRHNYGVGESFTVQRR",
    "DRB5*01:11" : "RFLQQDKYECHFFNGTERVRFLHRDIYNQEEDLRFDSDVGEYRAVTELGRPDAEYWNSQKDILEQARAAVDTYCRHNYGVGESFTVQRR",
    "DRB5*01:45": "RFLQQDKYECHFFNGTERVRFLHRDIYNQEEDLRFDSDVGEYRAVTELGRPDAEYWNSQKDFLEDRRAAVDTYCRHNYGVGESFTVQRR",
    "DRB5*01:62" : "RFLQQDKYECHFFNGTERVRFLHRDIYNQEEDLRFDSDVGEYRAVTELGRPDAEYWNSQKDFLEHRRAAVDTYCRHNYGVGESFTVQRR",
    }

'''
for loc in loclist:
    dataframe = pd.read_csv("./output/" + loc + "_AA_poly.csv")
    dataframe = dataframe.set_index('allele')
    dataframe = dataframe.filter(items=test_set[loc], axis=0)

    for allele in test_set[loc]:
        row = dataframe.loc[allele]
        row = row.loc[(row != 0)]
        row = list(row.keys())
        init_row = row
        row = [i[0] for i in row if i[0].isalpha()]
        row = ''.join(row)
        if row == test_seqs[allele]:
            print(allele + ': GOOD')
        else:
            print(allele + ': BAD')
            print(row)
            print(test_seqs[allele])
            print(init_row)
'''
'''
for i in range(100):
    allele1 = "C*03:02"
    AA_seq = aa_mm.getAAposition(allele1, i+1)
    print("position {pos}: {AA_seq}".format(pos=str(i+1), AA_seq=AA_seq))
'''

allele1 = "A*01:01"
position1 = 1

AA_83 = []
for i in range(1,184):
    AA_83.append(aa_mm.getAAposition(allele1, i))

print(''.join(AA_83))


